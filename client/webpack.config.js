const HtmlWebpackPlugin = require('html-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
// Require the GenerateSW class of the WorkBoxPlugin 
const {InjectManifest} = require('workbox-webpack-plugin');
const path = require('path');
const WebpackPwaManifest = require('webpack-pwa-manifest');


module.exports = () => {
  return {
    mode: 'development',
    entry: {
      main: './src/js/index.js', // This is the main entry point of your application
      install: './src/js/install.js', // This is the entry point for the install service worker
      cards: './src/js/cards.js' // This is the entry point for the cards service worker
    },
    // The devServer option is used to configure the webpack-dev-server.
    // The port option is used to specify the port that the webpack-dev-server will run on.
    // The default port is 8080.
  // devServer: {
  //   port: 3005,
  // },
    
   // The output option is used to specify the output directory and filename of the webpack build.
   // The filename option is used to specify the name of the output file.
    output: {
      filename: '[name].bundle.js',
      path: path.resolve(__dirname, 'dist') 
    },

    // TODO: Add the correct plugins
    plugins: [
      new HtmlWebpackPlugin({
        template: './index.html',
        title: 'Contact List',
      }), 
      new MiniCssExtractPlugin(),// This plugin will extract the CSS from the JavaScript bundle and create a separate CSS file.

      new WebpackPwaManifest({
        fingerprints: false,// The fingerprints option is used to specify whether the generated files should have a unique hash in the filename.
        // for example, if the fingerprints option is set to true, the generated files will have a unique hash in the filename like app.123456.js.
        // The default value of the fingerprints option is true. 
        inject: true,// The inject option is used to specify whether the manifest file should be injected into the HTML file.
        name: 'Contact INFO Cards',
        short_name: 'Contact',
        description: 'Never forget your contacts!',
        background_color: '#225ca3',
        theme_color: '#225ca3',
        start_url: './',// The start_url option is used to specify the URL that the PWA will open when the user launches the app from the home screen.
        display: 'standalone', // The display option is used to specify how the PWA will be displayed on the user's device.
        // The display option can have the following values:
        // fullscreen: The PWA will open in fullscreen mode.
        // standalone: The PWA will open in standalone mode.
        // minimal-ui: The PWA will open in minimal UI mode.
        // browser: The PWA will open in the browser.
        // filename: 'manifest.json', // The filename option is used to specify the name of the manifest file.
        publicPath: './',// The publicPath option is used to specify the path to the manifest file.
        orientation: 'portrait',// The orientation option is used to specify the orientation of the PWA.

       
        icons: [
          {
            src: path.resolve('src/images/logo.png'),
            sizes: [96, 128, 192, 256, 384, 512],
            
            destination: path.join('assetsManifest', 'iconsManifest'), // The destination option is used to specify the directory where the icons will be saved.
          },
        ],
      }),

      

      new InjectManifest // InjectManifest will generate a service worker 
      // that will precache the assets that are part of the webpack build. 
      // This is useful for assets that are part of the build process. 
      ({
        swSrc: './service-worker.js', // sw contains how you want to cache the assets or set up the runtime caching rules.
         // The path to the service worker file that will be injected into the service worker generated by Workbox. 
        // The swSrc option is required for the InjectManifest class. 
        // in the other words, sw.js file will be injected into the service worker generated by Workbox.
        // then sw.js will be injected into the service-worker.js file that will be generated by Workbox.
        swDest: 'service-worker.js',
        // service-worker.js is the default name of the service worker file that will be generated by Workbox. 
        // You can change the name of the service worker file by setting the swDest option.  
        // swDest: 'service-worker.js' will generate a service worker file named service-worker.js. 
        // The service worker file will be generated in the output directory of the webpack build.
        
      }), 

    ],

    // TODO: Add the correct modules
    module: {
      rules: [
        {
          test: /\.css$/i,
          use: [MiniCssExtractPlugin.loader, 'css-loader'],
        },
        {
          test: /\.(png|svg|jpg|jpeg|gif)$/i,
          type: 'asset/resource',
        },
        {
          test: /\.m?js$/,
          exclude: /(node_modules|bower_components)/,
          use: {
            loader: 'babel-loader',
            options: {
              presets: ['@babel/preset-env'],
            },
          },
        },
      ],

    }
  };
};
